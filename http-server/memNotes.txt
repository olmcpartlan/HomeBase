


There are two widely-used memory allocation techniques: automatic allocation and dynamic allocation. 
Commonly, there is a corresponding region of memory for each: the stack and the heap.

Stack
The stack always allocates memory in a sequential fashion. 
It can do so because it requires you to release the memory in the reverse order (First-In, Last-Out: FILO). 
This is the memory allocation technique for local variables in many programming languages. 
It is very, very fast because it requires minimal bookkeeping and the next address to allocate is implicit.

In C++, this is called automatic storage because the storage is claimed automatically at the end of scope. 
As soon as execution of current code block (delimited using {}) is completed, memory for all variables in that block is automatically collected. 
This is also the moment where destructors are invoked to clean up resources.


Heap
The heap allows for a more flexible memory allocation mode. 
Bookkeeping is more complex and allocation is slower. 
Because there is no implicit release point, you must release the memory manually, using delete or delete[] (free in C). 
However, the absence of an implicit release point is the key to the heap's flexibility.

Reasons to use dynamic allocation
Even if using the heap is slower and potentially leads to memory leaks or memory fragmentation, 
there are perfectly good use cases for dynamic allocation, as it's less limited.



Two key reasons to use dynamic allocation:

You don't know how much memory you need at compile time. 
For instance, when reading a text file into a string, you usually don't know what size the file has, 
so you can't decide how much memory to allocate until you run the program.


You want to allocate memory which will persist after leaving the current block. 
For instance, you may want to write a function string readfile(string path) that returns the contents of a file. 
In this case, even if the stack could hold the entire file contents, you could not return from a function and keep the allocated memory block.
